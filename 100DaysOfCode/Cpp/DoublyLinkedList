#include<iostream>

using namespace std;

struct  Node{
	int data;
	Node* next;
	Node* prev;
};
Node* head;
int size = 0;

Node* GetNewNode(int x)               // this function create a new node in the heap and put the required data in it
{	
	size++;
	Node* newNode = new Node();
	newNode->data = x;
	newNode->next = NULL;
	newNode->prev = NULL;
	return newNode;
}
void insertAtHead(int x)             // this fuction the take the address of the new node from the above function at put it at the beginning of the list
{
	Node* newNode = GetNewNode(x);
	if(head == NULL)
	{
		head = newNode;
		return;
	}
	
	head->prev = newNode;
	newNode->next = head;
	head = newNode;
	
}

void insertAtTail(int x)               // this fuction put the node at the end of the list
{
	Node* newNode  = GetNewNode(x);
	if(head == NULL){
		head = newNode;
		return;
	}
	Node* temp = head;
	while(temp->next != NULL)
	{
		temp = temp->next;
	}
	newNode->prev = temp;
	temp->next = newNode;
}

void print()
{
	cout<<"\nforward traversing is \n";
	Node* ptr = head;
	while(ptr != NULL)
	{
		cout<<ptr->data;
		ptr = ptr->next;
	}
}

void reversePrint()
{
	Node* temp = head;
	while(temp->next != NULL)
	{
		temp = temp->next;
	}
	cout<<"\nbackward traversing is \n";
	while(temp != NULL)
	{
		cout<<temp->data;
		temp=temp->prev;
	}
}

void Delete()
{
	int n;
	cout<<"\nenter the position of node u wanna delete\n";
	cin>>n;
	Node* temp = head;
	if(n>size || n<=0) 
	{
		cout<<"\nEnter a valid position\n\n";
		return;
	}
	
	if(n == 1)
	{
		head->next->prev= head->prev;
		head = head->next; 
		delete temp;
		return;
	}
	for(int i=0;i<n-2;i++)
	{
		temp = temp->next;
	}
	Node* toDelete = temp->next;
	temp->next = toDelete->next;
	if(toDelete->next != NULL) toDelete->next->prev = toDelete->prev;
	delete toDelete;
}
int main()
{
	head = NULL;
	insertAtHead(1);print();
	insertAtTail(2);print();
	insertAtTail(3);print();
	insertAtTail(4);print();
	insertAtTail(5);print();
	insertAtHead(6);print();reversePrint();
	Delete();print();reversePrint();
}
